## Elixir e Erlang

https://dev.to/elixir_utfpr/o-que-e-o-ecossistema-de-erlang-3km

## O que é um valor?

Um valor representa um dado do mundo. Por exemplo, 10 pode representar a idade de uma pessoa. Maria o nome desta pessoa e professora sua profissão. O salário mensal de Maria é R$ 5.050,55.

```elixir
10
```

```elixir
"Maria"
```

```elixir
"professora"
```

```elixir
5050.55
```

Você deve ter percebido que, ao escrever o nome e a profissão, usamos aspas. E, ao escrever o salário, usamos "." (ponto) no lugar da "," (vírgula) e não colocamos a moeda ("R$"). Explicaremos isto depois.

<!-- livebook:{"break_markdown":true} -->

Mas antes de mais nada temos que observar que os dados acima têm tipos diferentes.

## Quais são os tipos de valores?

### Tipos Básicos

https://elixirschool.com/pt/lessons/basics/basics#tipos-b%C3%A1sicos-3

### Inteiros
```elixir
iex> 255
255
```
O suporte para números binários, octais e hexadecimais também estão inclusos:
```elixir
iex> 0b0110
6
iex> 0o644
420
iex> 0x1F
31
```

### Pontos Flutuantes
Em Elixir, os números de ponto flutuante requerem um decimal depois de pelo menos um dígito; estes possuem uma precisão de 64 bits e suportam e para números exponenciais:
```elixir
iex> 3.14
 3.14
iex> .14
** (SyntaxError) iex:2: syntax error before: '.'
iex> 1.0e-10
1.0e-10
```

### Booleanos
Elixir suporta true e false como booleanos; todo valor é verdadeiro com exceção de false e nil:
```elixir
iex > true
true
iex > false
false
```

### Átomos
Um átomo é uma constante cujo o nome é seu valor. Se está familiarizado com Ruby, estes são equivalentes aos símbolos:
```elixir
iex> :foo
:foo
iex> :foo == :bar
false
```
Booleanos true e false também são os átomos :true e :false, respectivamente.
```elixir
iex> is_atom(true)
true
iex> is_boolean(:true)
true
iex> :true === true
true
```
Nomes de módulos em Elixir também são átomos. MyApp.MyModule é um átomo válido, mesmo se tal módulo ainda não tenha sido declarado.
```elixir
iex> is_atom(MyApp.MyModule)
true
```
Átomos também são usados para referenciar módulos de bibliotecas Erlang, incluindo as bibliotecas integradas.
```elixir
iex> :crypto.strong_rand_bytes 3
<<23, 104, 108>>
```
### Strings
As strings em Elixir são codificadas em UTF-8 e são representadas com aspas duplas:
```elixir
iex> "Hello"
"Hello"
iex> "dziękuję"
"dziękuję"
```
As strings suportam quebras de linha e caracteres de escape:
```elixir
iex> "foo
...> bar"
"foo\nbar"
iex> "foo\nbar"
"foo\nbar"
```

## O que é o casamento de padrões?

https://elixirschool.com/pt/lessons/basics/pattern_matching

## O que é uma variável?

## Como atribuir um valor a uma variável?

## Quais são os tipos de valores que são composições de outros tipos?

https://elixirschool.com/pt/lessons/basics/collections

### Casamento de padrões com coleções

https://elixirschool.com/pt/lessons/basics/pattern_matching

## Como usar funções

https://elixirschool.com/pt/lessons/basics/functions

Dar exemplos de algumas funções. 

String.

Aridade.

String.capitalize("wesLeY")

String.upcase("wesLeY")


String.duplicate("SIM ", 30)

String.upcase/1 String.upcase/2

String.duplicate/2


## Como definir módulos e funções

## Resolver um problema

Qual? Quais?
